#!/bin/bash

#############  CONSTANTES  #############
UTILS_MODULE=

SELF=`readlink $0 || echo $0`
SCRIPT_PATH=`dirname $SELF`

OOE_PATH=`cd $SCRIPT_PATH; pwd`

UTILS_MODULE=ooe_utils
############# FUNCOES #############

function usage
{
    echo "Usage: `basename $0` [options] [.cerl file]

    [-h   | --help]  Prints this help
    [-tk  | --tokens]  Prints the tokens list of the given .cerl file
    [-oast | --ooerlang_ast]  Prints the OOErlang Abstract Sintax Tree (AST) of the given .cerl file
    [-east | --erlang_ast]  Prints the Converted Erlang AST of the given .cerl file
    "
#    NOTE: If any option other than -d is passed, no erlang code file is generated!"
}

function generate_erl
{
    # echo "Generating Erlang source code from ooErlang..."
    compileParams=""
    for (( i = 0; i < fileIndex; i++ ))
    do
        # echo "filename $i:"${filename[$i]}
        compileParams=$compileParams\"${filename[$i]}"\""
        if [ `expr $i + 1` != $fileIndex ]; then
            compileParams=$compileParams","
        fi
    done
    # echo "$compileParams"
    erl -pa $OOE_PATH/ebin -noshell -eval "ooe_utils:compile( ["$compileParams"] )." -s erlang halt
    # echo ""
}

function print_tokens
{
    compileParams=""
    if [ $fileIndex > 1 ]; then
        echo "warning: print only tokens of " $filename[0]
        # echo ""
    fi
    compileParams=$compileParams"\"${filename[0]}\""
    erl -pa $OOE_PATH/ebin -noshell -eval "ooe_utils:print_tokens("$compileParams")." -s erlang halt
    # echo ""
}

function print_utree
{
    erl -pa $OOE_PATH/ebin -noshell -eval "ooe_utils:print_ooe_ast(\"$OOE_PATH/$filename\")." -s erlang halt
    # echo ""
}

function print_etree
{
    compileParams=""
    if [ $fileIndex > 1 ]; then
        echo "warning: printing only tokens of " $filename[0]
        # echo ""
    fi
    compileParams=$compileParams"\"${filename[0]}\""
    erl -pa $OOE_PATH/ebin -noshell -eval "ooe_utils:print_erl_ast("$compileParams")." -s erlang halt
    # echo ""
}

#############  SCRIPT  #############

# Foram passados parâmetros?
# $# -> quantidade de param.
if [ $# -eq 0 ]; then
    usage # executa funcao usage acima
    exit 1
fi

# var para armazenar se foi passada opção -tk
tokens=

# var para armazenar se foi passada opção -tr
utree=
etree=
fileIndex=0
filenames[$fileIndex]=""

# var para armazenar se deve ou não compilar
generate_erl=1

while [ "$1" != "" ]; do
    case $1 in
        -tk | --tokens )        tokens=1
                                generate_erl=0
                                ;;
        -oast | -ooerlang_ast ) utree=1
                                generate_erl=0
                                ;;
        -east | --erlang_ast )  etree=1
                                generate_erl=0
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        *.cerl )                filename[$fileIndex]=$1
                                fileIndex=`expr $fileIndex + 1`
                                ;;
        * )                     echo "error: file especified \"$1\" has not .cerl extension"
                                echo "" #newline
                                usage
                                exit 1
    esac
    shift
done

if [ "$filename" == "" ]; then
    echo "error: no file especified"
    # echo ""
    usage
    exit 1
fi

if [ "$tokens" == "1" ]; then
    print_tokens
fi

if [ "$utree" == "1" ]; then
    print_utree
fi

if [ "$etree" == "1" ]; then
    print_etree
fi

if [ "$generate_erl" == "1" ]; then
    generate_erl
fi
